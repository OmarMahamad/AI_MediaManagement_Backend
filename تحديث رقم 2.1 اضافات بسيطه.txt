
1. الهدف من النظام

تطوير نظام خلفي يدير سير عمل شامل لمنصة قصص تفاعلية مدعومة بالذكاء الاصطناعي، يشمل:
	•	إدارة القصص النصية والصوتية.
	•	الربط مع وحدة الذكاء الصناعي (AI).
	•	توليد وتحليل المحتوى.
	•	إدارة الاشتراكات والدفعات.
	•	الأمان والتشفير والخصوصية.
	•	النسخ الاحتياطي، التوسّع، والمراقبة.

⸻

2. المتطلبات الوظيفية (Functional Requirements)

الرقم	الميزة	التفاصيل
BE-FR1	API رفع القصص النصية/الصوتية	POST /api/stories/upload مع دعم تخزين مؤقت في Azure + التحقق من الصيغة والحجم
BE-FR2	ربط وحدة AI	استخدام Azure Service Bus أو gRPC لتمرير البيانات وتحليل النتائج
BE-FR3	إدارة الاشتراكات	دعم Stripe, PayPal, STC Pay، Razorpay، تحويل بنكي، محفظة داخلية
BE-FR4	API لتوليد الفيديو وعرضه	GET /api/video/{id} مع صلاحيات VIP، دعم تعدد الأجزاء، وتحسين التوافق عبر MP4/HLS
BE-FR5	إشعارات فورية	تكامل SignalR لإرسال إشعارات عند معالجة المحتوى أو تغير الحالة
BE-FR6	إدارة المستخدمين والأدوار	ASP.NET Identity مع أدوار (User، VIP، Admin، Moderator، Viewer)
BE-FR7	إدارة الأخطاء	نظام تسجيل مركزي Serilog + هيكل موحد لأكواد الأخطاء والتعامل مع الأعطال بالتفصيل
BE-FR8	API إدارة الاشتراكات العائلية	إضافة أعضاء، تحديد الحد الأعلى، ردود عند تجاوز الحد
BE-FR9	API الترجمة داخل النظام	دعم نظام داخلي لتخزين ملفات الترجمة واسترجاعها من CMS داخلي
BE-FR10	التقارير والتحليلات	دعم لوحات إدارة الأداء، الاشتراكات، الإيرادات، المحتوى



⸻

3. المتطلبات غير الوظيفية (Non-Functional Requirements)

القسم	المتطلبات
الأداء	زمن استجابة ≤ 500ms لـ 90% من الطلبات. دعم Load Balancer – Redis Caching
الأمان	AES-256-GCM لتشفير البيانات، TLS 1.3، CSRF Token، HSTS، JWT مع تدوير تلقائي كل 90 يوم
الخصوصية	توافق كامل مع GDPR/CCPA – حذف البيانات عند الطلب – موافقة المستخدم قبل استخدام البيانات
النسخ الاحتياطي	نسخ يومي تلقائي لـ Azure Blob و SQL DB – استعادة ≤ 1 ساعة (RTO)، فقد ≤ 5 دقائق (RPO)
التوسّع	Auto-scaling على Azure Kubernetes – توزيع جغرافي عبر Azure Traffic Manager
الامتثال	دعم PCI DSS في إدارة الدفع – التشفير – إخفاء البيانات الحساسة – شروط واضحة للمستخدم
الوصولية	دعم الأشخاص ذوي الاحتياجات الخاصة – توافق مع WCAG 2.1



⸻

4. إدارة البيانات وقاعدة البيانات
	•	الفهرسة: على الحقول: Email، UserId، VideoId
	•	التقسيم الزمني: جداول مثل Logs وSubscriptions تُقسّم شهريًا
	•	النسخ المتماثل: PostgreSQL Read Replicas
	•	Sanitization: HtmlSanitizer قبل الحفظ
	•	Masking: إخفاء بيانات الدفع في السجلات

⸻

5. التكامل مع الذكاء الاصطناعي
	•	دعم تمرير الصوت والنص وتحليل النتائج
	•	إرسال المهام إلى AI Queue حسب أولوية المستخدم (VIP أولًا)
	•	متابعة حالة المهمة عبر Webhook أو Polling
	•	تسجيل الزمن المتوقع والتعامل مع حالات الفشل الجزئي للفيديوهات المتعددة الأجزاء

⸻

6. إدارة الأخطاء والاستثناءات
	•	Fallback: عند فشل وحدة الذكاء الاصطناعي، يتم عرض “جارٍ المعالجة…” ويُعاد المحاولة
	•	Circuit Breakers: عند فشل وحدة معينة (AI، دفع، ترجمة) يتم عزلها مؤقتًا
	•	تعويض العمليات: (Compensating Transaction) عند فشل الدفع بعد التفعيل
	•	Exponential Backoff: لإعادة محاولات الدفع أو التوليد

⸻

7. واجهات الـ API الموثقة

POST /api/stories/upload
{
  "type": "audio",
  "file": "voice.mp3"
}

POST /api/subscriptions/family
{
  "ownerUserId": "123",
  "members": ["456", "789"]
}

GET /api/video/651?quality=1080p

أكواد الأخطاء (Error Catalog):

الرمز	المعنى
429	تم تجاوز عدد الطلبات المسموح بها
AI-504	فشل في توليد الفيديو من وحدة AI
SUB-403	محاولة تجاوز الحد الأقصى للاشتراك



⸻

8. المراقبة والتنبيهات
	•	أدوات: Azure Application Insights + Serilog + Elastic + Grafana
	•	تنبيهات:
	•	ارتفاع أخطاء 5xx بنسبة >5%
	•	بطء معالجة AI > 2 دقيقة
	•	فشل تحميل الفيديو لأكثر من 3 محاولات

⸻

9. اختبار الفوضى (Chaos Engineering)
	•	أدوات: Azure Chaos Studio
	•	السيناريوهات:
	•	فقد اتصال Redis
	•	توقف وحدة الترجمة
	•	انقطاع 10 دقائق في قاعدة البيانات
	•	ردود الفعل: اختبارات تلقائية + تعويض + تنبيه الفريق

⸻

10. التوثيق والتطوير المستمر
	•	Swagger لجميع واجهات API مع دعم النسخ القديمة
	•	Versioning: Header (Api-Version)
	•	CI/CD: نشر تلقائي على Azure Kubernetes باستخدام GitHub Actions
	•	دليل المطور: يحتوي على جميع خطوات بناء، اختبار، نشر، استرجاع النماذج

⸻
