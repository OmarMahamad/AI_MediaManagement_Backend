// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer;

#nullable disable

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(DbApp))]
    [Migration("20250701192754_authoEntity")]
    partial class authoEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RepositoryLayer.Entitys.AuthorizationEntity.AuthorizationToken", b =>
                {
                    b.Property<int>("AuthorizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorizationId"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuthorizationId");

                    b.HasIndex("UserId");

                    b.ToTable("authorizationTokens");
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.ContantEntity.Content", b =>
                {
                    b.Property<int>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfViews")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TypeOfContent")
                        .HasColumnType("int");

                    b.Property<int?>("WriterUserId")
                        .HasColumnType("int");

                    b.HasKey("ContentId");

                    b.HasIndex("WriterUserId");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.SubscriptionEntity.PaymentTransaction", b =>
                {
                    b.Property<int>("PaymentTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTransactionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubscriptionEnd")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubscriptionStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentTransactionId");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("paymentTransactions");
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.SubscriptionEntity.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubscriptionId"));

                    b.Property<string>("AcousticCharacteristics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NumberOfLetters")
                        .HasColumnType("int");

                    b.Property<int>("TimeOfSubscription")
                        .HasColumnType("int");

                    b.Property<int>("VideoQuality")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionId");

                    b.ToTable("subscriptions");
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.UserEntity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.UserEntity.Admin", b =>
                {
                    b.HasBaseType("RepositoryLayer.Entitys.UserEntity.User");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.UserEntity.FinancialAccounts", b =>
                {
                    b.HasBaseType("RepositoryLayer.Entitys.UserEntity.User");

                    b.HasDiscriminator().HasValue("FinancialAccounts");
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.UserEntity.Writer", b =>
                {
                    b.HasBaseType("RepositoryLayer.Entitys.UserEntity.User");

                    b.Property<int?>("ContentId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTransactionId")
                        .HasColumnType("int");

                    b.HasIndex("PaymentTransactionId");

                    b.HasDiscriminator().HasValue("Writer");
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.AuthorizationEntity.AuthorizationToken", b =>
                {
                    b.HasOne("RepositoryLayer.Entitys.UserEntity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.ContantEntity.Content", b =>
                {
                    b.HasOne("RepositoryLayer.Entitys.UserEntity.Writer", null)
                        .WithMany("Contents")
                        .HasForeignKey("WriterUserId");
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.SubscriptionEntity.PaymentTransaction", b =>
                {
                    b.HasOne("RepositoryLayer.Entitys.SubscriptionEntity.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryLayer.Entitys.UserEntity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.UserEntity.Writer", b =>
                {
                    b.HasOne("RepositoryLayer.Entitys.SubscriptionEntity.PaymentTransaction", "PaymentTransaction")
                        .WithMany()
                        .HasForeignKey("PaymentTransactionId");

                    b.Navigation("PaymentTransaction");
                });

            modelBuilder.Entity("RepositoryLayer.Entitys.UserEntity.Writer", b =>
                {
                    b.Navigation("Contents");
                });
#pragma warning restore 612, 618
        }
    }
}
